package com.stytch.kotlin.consumer.api.otpemail

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Moshi
import com.stytch.kotlin.common.StytchResult
import com.stytch.kotlin.consumer.models.otpemail.LoginOrCreateRequest
import com.stytch.kotlin.consumer.models.otpemail.LoginOrCreateResponse
import com.stytch.kotlin.consumer.models.otpemail.SendRequest
import com.stytch.kotlin.consumer.models.otpemail.SendResponse
import com.stytch.kotlin.http.HttpClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

public interface Email {
    /**
     * Send a one-time passcode (OTP) to a User using their email. If you'd like to create a user and send them a passcode
     * with one request, use our [log in or create endpoint](https://stytch.com/docs/api/log-in-or-create-user-by-email-otp).
     *
     * ### Add an email to an existing user
     * This endpoint also allows you to add a new email to an existing Stytch User. Including a `user_id`, `session_token`, or
     * `session_jwt` in the request will add the email to the pre-existing Stytch User upon successful authentication.
     *
     * Adding a new email to an existing Stytch User requires the User to be present and validate the email via OTP. This
     * requirement is in place to prevent account takeover attacks.
     *
     * ### Next steps
     * Collect the OTP which was delivered to the user. Call [Authenticate OTP](https://stytch.com/docs/api/authenticate-otp)
     * using the OTP `code` along with the `phone_id` found in the response as the `method_id`.
     */
    public suspend fun send(data: SendRequest): StytchResult<SendResponse>

    /**
     * Send a one-time passcode (OTP) to a User using their email. If you'd like to create a user and send them a passcode
     * with one request, use our [log in or create endpoint](https://stytch.com/docs/api/log-in-or-create-user-by-email-otp).
     *
     * ### Add an email to an existing user
     * This endpoint also allows you to add a new email to an existing Stytch User. Including a `user_id`, `session_token`, or
     * `session_jwt` in the request will add the email to the pre-existing Stytch User upon successful authentication.
     *
     * Adding a new email to an existing Stytch User requires the User to be present and validate the email via OTP. This
     * requirement is in place to prevent account takeover attacks.
     *
     * ### Next steps
     * Collect the OTP which was delivered to the user. Call [Authenticate OTP](https://stytch.com/docs/api/authenticate-otp)
     * using the OTP `code` along with the `phone_id` found in the response as the `method_id`.
     */
    public fun send(data: SendRequest, callback: (StytchResult<SendResponse>) -> Unit)

    /**
     * Send a one-time passcode (OTP) to a User using their email. If the email is not associated with a User already, a User
     * will be created.
     *
     * ### Next steps
     *
     * Collect the OTP which was delivered to the User. Call [Authenticate OTP](https://stytch.com/docs/api/authenticate-otp)
     * using the OTP `code` along with the `phone_id` found in the response as the `method_id`.
     */
    public suspend fun loginOrCreate(data: LoginOrCreateRequest): StytchResult<LoginOrCreateResponse>

    /**
     * Send a one-time passcode (OTP) to a User using their email. If the email is not associated with a User already, a User
     * will be created.
     *
     * ### Next steps
     *
     * Collect the OTP which was delivered to the User. Call [Authenticate OTP](https://stytch.com/docs/api/authenticate-otp)
     * using the OTP `code` along with the `phone_id` found in the response as the `method_id`.
     */
    public fun loginOrCreate(data: LoginOrCreateRequest, callback: (StytchResult<LoginOrCreateResponse>) -> Unit)
}

internal class EmailImpl(
    private val httpClient: HttpClient,
    private val coroutineScope: CoroutineScope,
) : Email {

    private val moshi = Moshi.Builder().build()

    override suspend fun send(data: SendRequest): StytchResult<SendResponse> = withContext(Dispatchers.IO) {
        val asJson = moshi.adapter(SendRequest::class.java).toJson(data)
        httpClient.post("/v1/otps/email/send", asJson)
    }

    override fun send(data: SendRequest, callback: (StytchResult<SendResponse>) -> Unit) {
        coroutineScope.launch {
            callback(send(data))
        }
    }
    override suspend fun loginOrCreate(data: LoginOrCreateRequest): StytchResult<LoginOrCreateResponse> = withContext(Dispatchers.IO) {
        val asJson = moshi.adapter(LoginOrCreateRequest::class.java).toJson(data)
        httpClient.post("/v1/otps/email/login_or_create", asJson)
    }

    override fun loginOrCreate(data: LoginOrCreateRequest, callback: (StytchResult<LoginOrCreateResponse>) -> Unit) {
        coroutineScope.launch {
            callback(loginOrCreate(data))
        }
    }
}
