package com.stytch.kotlin.b2b.models.sessions

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass
import com.stytch.kotlin.b2b.models.organizations.Member
import com.stytch.kotlin.b2b.models.organizations.Organization
import com.stytch.kotlin.consumer.models.sessions.AuthenticationFactor
import com.stytch.kotlin.consumer.models.sessions.JWK
import java.time.Instant

@JsonClass(generateAdapter = false)
public enum class ExchangeRequestLocale {
    @Json(name = "en")
    EN,

    @Json(name = "es")
    ES,

    @Json(name = "ptbr")
    PTBR,
}

@JsonClass(generateAdapter = true)
public data class MemberSession(
    /**
     * Globally unique UUID that identifies a specific Session.
     */
    @Json(name = "member_session_id")
    val memberSessionId: String,
    /**
     * Globally unique UUID that identifies a specific Member.
     */
    @Json(name = "member_id")
    val memberId: String,
    /**
     * The timestamp when the Session was created. Values conform to the RFC 3339 standard and are expressed in UTC, e.g.
     * `2021-12-29T12:33:09Z`.
     */
    @Json(name = "started_at")
    val startedAt: Instant,
    /**
     * The timestamp when the Session was last accessed. Values conform to the RFC 3339 standard and are expressed in UTC,
     * e.g. `2021-12-29T12:33:09Z`.
     */
    @Json(name = "last_accessed_at")
    val lastAccessedAt: Instant,
    /**
     * The timestamp when the Session expires. Values conform to the RFC 3339 standard and are expressed in UTC, e.g.
     * `2021-12-29T12:33:09Z`.
     */
    @Json(name = "expires_at")
    val expiresAt: Instant,
    /**
     * An array of different authentication factors that have initiated a Session.
     */
    @Json(name = "authentication_factors")
    val authenticationFactors: List<AuthenticationFactor>,
    /**
     * The custom claims map for a Session. Claims can be added to a session during a Sessions authenticate call.
     */
    @Json(name = "custom_claims")
    val customClaims: Map<String, Any>,
    /**
     * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to perform operations
     * on an Organization, so be sure to preserve this value.
     */
    @Json(name = "organization_id")
    val organizationId: String,
)

/**
* Request type for `Sessions.authenticate`.
*/
@JsonClass(generateAdapter = true)
public data class AuthenticateRequest(
    /**
     * A secret token for a given Stytch Session.
     */
    @Json(name = "session_token")
    val sessionToken: String? = null,
    /**
     * Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't already exist,
     *   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the `session_jwt` will
     * have a fixed lifetime of
     *   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
     *
     *   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
     *
     *   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to extend the
     * session this many minutes.
     *
     *   If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a 60 minute
     * duration. If you don't want
     *   to use the Stytch session product, you can ignore the session fields in the response.
     */
    @Json(name = "session_duration_minutes")
    val sessionDurationMinutes: Int? = null,
    /**
     * The JSON Web Token (JWT) for a given Stytch Session.
     */
    @Json(name = "session_jwt")
    val sessionJwt: String? = null,
    /**
     * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is initialized by
     * providing a value in
     *   `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a key in an
     * existing Session, supply a new value. To
     *   delete a key, supply a null value. Custom claims made with reserved claims (`iss`, `sub`, `aud`, `exp`, `nbf`, `iat`,
     * `jti`) will be ignored.
     *   Total custom claims size cannot exceed four kilobytes.
     */
    @Json(name = "session_custom_claims")
    val sessionCustomClaims: Map<String, Any>? = null,
)

/**
* Response type for `Sessions.authenticate`.
*/
@JsonClass(generateAdapter = true)
public data class AuthenticateResponse(
    /**
     * Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we
     * may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    @Json(name = "request_id")
    val requestId: String,
    /**
     * The [Session object](https://stytch.com/docs/b2b/api/session-object).
     */
    @Json(name = "member_session")
    val memberSession: MemberSession,
    /**
     * A secret token for a given Stytch Session.
     */
    @Json(name = "session_token")
    val sessionToken: String,
    /**
     * The JSON Web Token (JWT) for a given Stytch Session.
     */
    @Json(name = "session_jwt")
    val sessionJwt: String,
    /**
     * The [Member object](https://stytch.com/docs/b2b/api/member-object).
     */
    @Json(name = "member")
    val member: Member,
    /**
     * The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
     */
    @Json(name = "organization")
    val organization: Organization,
    /**
     * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values
     * equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    @Json(name = "status_code")
    val statusCode: Int,
)

/**
* Request type for `Sessions.exchange`.
*/
@JsonClass(generateAdapter = true)
public data class ExchangeRequest(
    /**
     * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to perform operations
     * on an Organization, so be sure to preserve this value.
     */
    @Json(name = "organization_id")
    val organizationId: String,
    /**
     * The `session_token` belonging to the member that you wish to associate the email with.
     */
    @Json(name = "session_token")
    val sessionToken: String? = null,
    /**
     * The `session_jwt` belonging to the member that you wish to associate the email with.
     */
    @Json(name = "session_jwt")
    val sessionJwt: String? = null,
    /**
     * Set the session lifetime to be this many minutes from now. This will start a new session if one doesn't already exist,
     *   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the `session_jwt` will
     * have a fixed lifetime of
     *   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
     *
     *   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
     *
     *   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to extend the
     * session this many minutes.
     *
     *   If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a 60 minute
     * duration. If you don't want
     *   to use the Stytch session product, you can ignore the session fields in the response.
     */
    @Json(name = "session_duration_minutes")
    val sessionDurationMinutes: Int? = null,
    /**
     * Add a custom claims map to the Session being authenticated. Claims are only created if a Session is initialized by
     * providing a value in
     *   `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a key in an
     * existing Session, supply a new value. To
     *   delete a key, supply a null value. Custom claims made with reserved claims (`iss`, `sub`, `aud`, `exp`, `nbf`, `iat`,
     * `jti`) will be ignored.
     *   Total custom claims size cannot exceed four kilobytes.
     */
    @Json(name = "session_custom_claims")
    val sessionCustomClaims: Map<String, Any>? = null,
    @Json(name = "locale")
    val locale: ExchangeRequestLocale? = null,
)

/**
* Response type for `Sessions.exchange`.
*/
@JsonClass(generateAdapter = true)
public data class ExchangeResponse(
    /**
     * Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we
     * may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    @Json(name = "request_id")
    val requestId: String,
    /**
     * Globally unique UUID that identifies a specific Member.
     */
    @Json(name = "member_id")
    val memberId: String,
    /**
     * The [Session object](https://stytch.com/docs/b2b/api/session-object).
     */
    @Json(name = "member_session")
    val memberSession: MemberSession,
    /**
     * A secret token for a given Stytch Session.
     */
    @Json(name = "session_token")
    val sessionToken: String,
    /**
     * The JSON Web Token (JWT) for a given Stytch Session.
     */
    @Json(name = "session_jwt")
    val sessionJwt: String,
    /**
     * The [Member object](https://stytch.com/docs/b2b/api/member-object).
     */
    @Json(name = "member")
    val member: Member,
    /**
     * The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
     */
    @Json(name = "organization")
    val organization: Organization,
    /**
     * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values
     * equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    @Json(name = "status_code")
    val statusCode: Int,
)

/**
* Request type for `Sessions.getJWKS`.
*/
@JsonClass(generateAdapter = true)
public data class GetJWKSRequest(
    /**
     * The `project_id` to get the JWKS for.
     */
    @Json(name = "project_id")
    val projectId: String,
)

/**
* Response type for `Sessions.getJWKS`.
*/
@JsonClass(generateAdapter = true)
public data class GetJWKSResponse(
    /**
     * The JWK
     */
    @Json(name = "keys")
    val keys: List<JWK>,
    /**
     * Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we
     * may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    @Json(name = "request_id")
    val requestId: String,
    /**
     * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values
     * equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    @Json(name = "status_code")
    val statusCode: Int,
)

/**
* Request type for `Sessions.get`.
*/
@JsonClass(generateAdapter = true)
public data class GetRequest(
    /**
     * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to perform operations
     * on an Organization, so be sure to preserve this value.
     */
    @Json(name = "organization_id")
    val organizationId: String,
    /**
     * Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform operations on a Member,
     * so be sure to preserve this value.
     */
    @Json(name = "member_id")
    val memberId: String,
)

/**
* Response type for `Sessions.get`.
*/
@JsonClass(generateAdapter = true)
public data class GetResponse(
    /**
     * Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we
     * may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    @Json(name = "request_id")
    val requestId: String,
    /**
     * An array of [Session objects](https://stytch.com/docs/b2b/api/session-object).
     */
    @Json(name = "member_sessions")
    val memberSessions: List<MemberSession>,
    /**
     * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values
     * equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    @Json(name = "status_code")
    val statusCode: Int,
)

/**
* Request type for `Sessions.revoke`.
*/
@JsonClass(generateAdapter = true)
public data class RevokeRequest(
    /**
     * Globally unique UUID that identifies a specific Session in the Stytch API. The `member_session_id` is critical to
     * perform operations on an Session, so be sure to preserve this value.
     */
    @Json(name = "member_session_id")
    val memberSessionId: String? = null,
    /**
     * A secret token for a given Stytch Session.
     */
    @Json(name = "session_token")
    val sessionToken: String? = null,
    /**
     * The JSON Web Token (JWT) for a given Stytch Session.
     */
    @Json(name = "session_jwt")
    val sessionJwt: String? = null,
    /**
     * Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform operations on a Member,
     * so be sure to preserve this value.
     */
    @Json(name = "member_id")
    val memberId: String? = null,
)

/**
* Response type for `Sessions.revoke`.
*/
@JsonClass(generateAdapter = true)
public data class RevokeResponse(
    /**
     * Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we
     * may ask for this value to help identify a specific API call when helping you debug an issue.
     */
    @Json(name = "request_id")
    val requestId: String,
    /**
     * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values
     * equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
     */
    @Json(name = "status_code")
    val statusCode: Int,
)
