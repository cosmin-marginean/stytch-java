package com.stytch.kotlin.b2b.api.magiclinksemaildiscovery

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Moshi
import com.stytch.kotlin.b2b.models.magiclinksemaildiscovery.SendRequest
import com.stytch.kotlin.b2b.models.magiclinksemaildiscovery.SendResponse
import com.stytch.kotlin.common.StytchResult
import com.stytch.kotlin.http.HttpClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

public interface Discovery {
    /**
     * Send a discovery magic link to an email address.
     */
    public suspend fun send(data: SendRequest): StytchResult<SendResponse>

    /**
     * Send a discovery magic link to an email address.
     */
    public fun send(data: SendRequest, callback: (StytchResult<SendResponse>) -> Unit)
}

internal class DiscoveryImpl(
    private val httpClient: HttpClient,
    private val coroutineScope: CoroutineScope,
) : Discovery {

    private val moshi = Moshi.Builder().build()

    override suspend fun send(data: SendRequest): StytchResult<SendResponse> = withContext(Dispatchers.IO) {
        val asJson = moshi.adapter(SendRequest::class.java).toJson(data)
        httpClient.post("/v1/b2b/magic_links/email/discovery/send", asJson)
    }

    override fun send(data: SendRequest, callback: (StytchResult<SendResponse>) -> Unit) {
        coroutineScope.launch {
            callback(send(data))
        }
    }
}
