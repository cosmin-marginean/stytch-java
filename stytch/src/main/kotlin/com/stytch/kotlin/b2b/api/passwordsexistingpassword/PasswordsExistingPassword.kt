package com.stytch.kotlin.b2b.api.passwordsexistingpassword

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Moshi
import com.stytch.kotlin.b2b.models.passwordsexistingpassword.ResetRequest
import com.stytch.kotlin.b2b.models.passwordsexistingpassword.ResetResponse
import com.stytch.kotlin.common.StytchResult
import com.stytch.kotlin.http.HttpClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

public interface ExistingPassword {
    /**
     * Reset the member’s password using their existing password.
     *
     * This endpoint adapts to your Project's password strength configuration.
     * If you're using [zxcvbn](https://stytch.com/docs/passwords#strength-requirements), the default, your passwords are
     * considered valid
     * if the strength score is >= 3. If you're using [LUDS](https://stytch.com/docs/passwords#strength-requirements), your
     * passwords are
     * considered valid if they meet the requirements that you've set with Stytch.
     * You may update your password strength configuration in the
     * [stytch dashboard](https://stytch.com/dashboard/password-strength-config).
     */
    public suspend fun reset(data: ResetRequest): StytchResult<ResetResponse>

    /**
     * Reset the member’s password using their existing password.
     *
     * This endpoint adapts to your Project's password strength configuration.
     * If you're using [zxcvbn](https://stytch.com/docs/passwords#strength-requirements), the default, your passwords are
     * considered valid
     * if the strength score is >= 3. If you're using [LUDS](https://stytch.com/docs/passwords#strength-requirements), your
     * passwords are
     * considered valid if they meet the requirements that you've set with Stytch.
     * You may update your password strength configuration in the
     * [stytch dashboard](https://stytch.com/dashboard/password-strength-config).
     */
    public fun reset(data: ResetRequest, callback: (StytchResult<ResetResponse>) -> Unit)
}

internal class ExistingPasswordImpl(
    private val httpClient: HttpClient,
    private val coroutineScope: CoroutineScope,
) : ExistingPassword {

    private val moshi = Moshi.Builder().build()

    override suspend fun reset(data: ResetRequest): StytchResult<ResetResponse> = withContext(Dispatchers.IO) {
        val asJson = moshi.adapter(ResetRequest::class.java).toJson(data)
        httpClient.post("/v1/b2b/passwords/existing_password/reset", asJson)
    }

    override fun reset(data: ResetRequest, callback: (StytchResult<ResetResponse>) -> Unit) {
        coroutineScope.launch {
            callback(reset(data))
        }
    }
}
