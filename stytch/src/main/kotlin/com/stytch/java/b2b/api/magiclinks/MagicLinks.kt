package com.stytch.java.b2b.api.magiclinks

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Moshi
import com.stytch.java.b2b.api.magiclinksdiscovery.Discovery
import com.stytch.java.b2b.api.magiclinksdiscovery.DiscoveryImpl
import com.stytch.java.b2b.api.magiclinksemail.Email
import com.stytch.java.b2b.api.magiclinksemail.EmailImpl
import com.stytch.java.b2b.models.magiclinks.AuthenticateRequest
import com.stytch.java.b2b.models.magiclinks.AuthenticateResponse
import com.stytch.java.common.StytchResult
import com.stytch.java.http.HttpClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import kotlinx.coroutines.future.asCompletableFuture
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.util.concurrent.CompletableFuture
public interface MagicLinks {
    public val email: Email

    public val discovery: Discovery

    /**
     * Authenticate a Member with a Magic Link. This endpoint requires a Magic Link token that is not expired or previously
     * used. If the Member’s status is `pending` or `invited`, they will be updated to `active`. Provide the
     * `session_duration_minutes` parameter to set the lifetime of the session. If the `session_duration_minutes` parameter is
     * not specified, a Stytch session will be created with a 60 minute duration.
     */
    public suspend fun authenticate(data: AuthenticateRequest): StytchResult<AuthenticateResponse>

    /**
     * Authenticate a Member with a Magic Link. This endpoint requires a Magic Link token that is not expired or previously
     * used. If the Member’s status is `pending` or `invited`, they will be updated to `active`. Provide the
     * `session_duration_minutes` parameter to set the lifetime of the session. If the `session_duration_minutes` parameter is
     * not specified, a Stytch session will be created with a 60 minute duration.
     */
    public fun authenticate(data: AuthenticateRequest, callback: (StytchResult<AuthenticateResponse>) -> Unit)

    /**
     * Authenticate a Member with a Magic Link. This endpoint requires a Magic Link token that is not expired or previously
     * used. If the Member’s status is `pending` or `invited`, they will be updated to `active`. Provide the
     * `session_duration_minutes` parameter to set the lifetime of the session. If the `session_duration_minutes` parameter is
     * not specified, a Stytch session will be created with a 60 minute duration.
     */
    public fun authenticateCompletable(data: AuthenticateRequest): CompletableFuture<StytchResult<AuthenticateResponse>>
}

internal class MagicLinksImpl(
    private val httpClient: HttpClient,
    private val coroutineScope: CoroutineScope,
) : MagicLinks {

    private val moshi = Moshi.Builder().build()

    override val email: Email = EmailImpl(httpClient, coroutineScope)
    override val discovery: Discovery = DiscoveryImpl(httpClient, coroutineScope)

    override suspend fun authenticate(data: AuthenticateRequest): StytchResult<AuthenticateResponse> = withContext(Dispatchers.IO) {
        val asJson = moshi.adapter(AuthenticateRequest::class.java).toJson(data)
        httpClient.post("/v1/b2b/magic_links/authenticate", asJson)
    }

    override fun authenticate(data: AuthenticateRequest, callback: (StytchResult<AuthenticateResponse>) -> Unit) {
        coroutineScope.launch {
            callback(authenticate(data))
        }
    }

    override fun authenticateCompletable(data: AuthenticateRequest): CompletableFuture<StytchResult<AuthenticateResponse>> =
        coroutineScope.async {
            authenticate(data)
        }.asCompletableFuture()
}
